"""
设计一种方法，在一组数中查找一个数，并且返回这个数在这组数中的位置（练习二分法解决问题）
"""


def binary_search(list_, item):  # 目的是查找位置，所以位置作为变量
    low = 0                         # 初始的下限和上限的位置
    high = len(list_)-1
    while low <= high:             # 只要上下没缩到一个数
        mid = (low + high) // 2    # 中位数的位置  （整除向下取整）
        guess = list_[mid]            # 每次猜中位数
        if guess == item:            # 猜中了，返回
            return mid
        elif guess < item:  # 中位数为最中间那个数，用于划分开区间，所以变更的时候才要一个加1，一个减一。
            low = mid+1      # 猜小了，把比中位数大的那个区间作为新的猜测区间
        else:
            high = mid-1     # 猜大了，把比中位数小的那个区间作为新的猜测区间   返回重新计算新区间的中位数以此类推
    return None     # 缩到一个数还没找到，说明列表里面根本没有这个数,返回空置


print(binary_search([1, 3, 25, 63, 77, 86, 98, 123, 587, 1024, 1388, 1498, 1577, 1998], 1024))
